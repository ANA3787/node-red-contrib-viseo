'use strict';

class DatabaseManager {

    constructor(node) {
        if (this.constructor === DatabaseManager) {
            throw new TypeError('Abstract class "DatabaseManager" cannot be instantiated directly.'); 
        }
    }

    static get definition() {
        return {
            name : "", //name displayed in Node-red editor
            qName : "" //string value used to identify the database manager
        };
    }

    getStatus(config) {
    	return "";
    }

    end(callback) {
    	throw new TypeError('end Method should be implemented.');
    }

    find(key, data, config, callback) {
    	throw new TypeError('find Method should be implemented.');
    }

    update(key, value, data, config, callback) {
    	throw new TypeError('update Method should be implemented.');
    }

    add(values, data, config, callback) {
    	throw new TypeError('add Method should be implemented.');
    }

    remove(key, data, config, callback) {
    	throw new TypeError('remove Method should be implemented.');
    }
}

let _databaseRegistry = null;
class DatabaseRegistry {

    constructor() {
        this._list = [];
    }

    static get instance() {
        if(_databaseRegistry === null) {
            _databaseRegistry = new DatabaseRegistry();
        }
        return _databaseRegistry;
    }

    get list() {
        return this._list;
    }

    get values() {
        let values = [];
        for(let value of this._list) {
            values.push(value.qName);
        }
        return values;
    }

    register(DbManager) {
        if((DbManager.prototype instanceof DatabaseManager) === false) {
            throw new TypeError("Only DatabaseManager classes can be registered");
        }
        this._list.push(DbManager.definition);
    }
}

module.exports.DbManager = DatabaseManager;
module.exports.dbRegistry = DatabaseRegistry.instance;