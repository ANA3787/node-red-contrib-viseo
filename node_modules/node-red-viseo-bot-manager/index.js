'use strict';

const extend = require('extend');
const helper = require('node-red-viseo-helper');


const getUserAddress = exports.getUserAddress = (data) => {
    return helper.getByString(data, 'user.address', undefined)
}

//user.address.conversation.id shouldn't be overriden by subsequent database requests if the "merge" option is ticked
const getConvId = exports.getConvId = (data) => {
    return helper.getByString(data, 'user.address.conversation.id', undefined)
}

let _CONTEXTS = {};
const getContext = exports.getContext = (data) => {

    let convId = getConvId(data);
    let context = _CONTEXTS[convId];

    if(!context) {
        context = _CONTEXTS[convId] = {};
    }

    return context;
}

const getUserProfile = exports.getUserProfile = (data) => {
    if (!data.user) data.user = {};
    if (!data.user.profile) data.user.profile = {};
    return data.user.profile;
}

const getLocale = exports.getLocale = (data) => {
    let profile = getUserProfile(data);
    return profile.locale || 'fr_FR';
}

// ------------------------------------------
//  BOT MESSAGE
// ------------------------------------------

const buildMessageFlow = exports.buildMessageFlow = (data, config) => {
    
    data = data || {}
    let msg  = data.message = data.message || {}
    
    if (config.source) msg.source = msg.source || config.source;
    if (config.agent)  msg.agent  = msg.agent  || config.agent;
    msg.attachments = msg.attachments || [];

    msg.address = msg.address || {}
    msg.address.carrier = msg.address.carrier || config.agent || config.source
    msg.address.conversation = msg.address.conversation || {}
    msg.address.conversation.id = helper.getByString(data, config.convId, msg.address.conversation.id || 'UnknowId');

    msg.user      = msg.user || {}
    msg.user.id   = helper.getByString(data, config.userId, msg.user.id     || 'UnknownId');
    msg.user.name = helper.getByString(data, config.userName, msg.user.name || 'Unknown');

    data.user = data.user || {}
    data.user.address = data.user.address || {}
    data.user.profile = data.user.profile || {}
    extend(true, data.user, msg.user);
    extend(true, data.user.address, msg.address);

    if (config.payload){
        let payload = helper.getByString(data, config.payload,  'Unknown Payload');
        data.payload = payload
    }
    if (data.payload){ // warn can be tricky if it's an irevelant payload
        msg.text = msg.text || data.payload
    }

    if (config.context){
        let currentContext = getContext(data)
        let ctxt = helper.getByString(data, config.context, undefined);
        extend(true, currentContext, ctxt);
    }
    
    return data;
}

// ------------------------------------------
//  CALLBACK DELAYED (PROMPT)
// ------------------------------------------

var DELAYED_CALLBACK = {}
const delayCallback = exports.delayCallback = (id, callback) => {
    if (!id) return;
    DELAYED_CALLBACK[id] = callback;
}

const hasDelayedCallback = exports.hasDelayedCallback = (id, data) => {
    if (!id) return;

    let callback = DELAYED_CALLBACK[id];
    if (undefined === callback) return false;

    delete DELAYED_CALLBACK[id];
    callback(data);
    return true;
}